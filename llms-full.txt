# FrourioNext Library Documentation for LLM Understanding

## 1. Overview

FrourioNext is a library for Next.js App Router that enhances API Route Handler development. It provides:
- End-to-End Type Safety: Define API specifications using Zod schemas in `frourio.ts`. These schemas enforce type safety in server-side handlers (`route.ts`) and in the auto-generated client code (`frourio.client.ts`).
- Runtime Validation: Automatically validates incoming request data (path parameters, query strings, headers, request bodies) against the defined Zod schemas within the Route Handlers. Also validates response bodies before sending.
- Auto-Generated Type-Safe Client: Generates `frourio.client.ts` files containing type-safe HTTP client functions (`fc` and `$fc`). These clients mirror the API route structure and provide compile-time checks for API calls from the frontend or other server-side code.
- Middleware Support: Allows defining and implementing middleware functions for shared logic like authentication, logging, or context injection, with support for inheritance.
- OpenAPI Generation: Optionally generates OpenAPI 3.1 specification files based on the `frourio.ts` definitions.
- MSW Handlers Generation: Automatically generate MSW (Mock Service Worker) request handlers from your `frourio.ts` definitions for mocking API calls in tests or during frontend development.

## 2. Core Workflow

1.  **Define API Specification (`frourio.ts`)**: In each directory corresponding to an API route segment (e.g., `app/api/users/[userId]/`), create a `frourio.ts` file. Use Zod schemas to define the structure and validation rules for the API endpoint(s) within that segment.
2.  **Run Code Generation**: Execute `npm run dev` (which includes `frourio-next --watch`) or `npm run build` (which includes `frourio-next`). This command scans for `frourio.ts` files and generates/updates corresponding `*.server.ts` and `*.client.ts` files.
3.  **Implement Route Handler (`route.ts`)**: Create a `route.ts` file in the same directory as `frourio.ts`. Import the `createRoute` helper function from the generated `frourio.server.ts` file. Use `createRoute` to define the handler functions (e.g., `GET`, `POST`) for the HTTP methods specified in `frourio.ts`.
4.  **Use Type-Safe Client**: Import and initialize the client functions (`fc` or `$fc`) from the generated root `frourio.client.ts` file (e.g., in `lib/apiClient.ts`). Use the initialized client in your application code (frontend components, server components, other backend services) to make type-safe API calls.

## 3. Installation

```bash
# Using npm
npm install next zod
npm install @frourio/next npm-run-all --save-dev

# Using yarn
yarn add next zod
yarn add @frourio/next npm-run-all --dev

# Using pnpm
pnpm add next zod
pnpm add @frourio/next npm-run-all --save-dev
```

## 4. Setup (`package.json`)

Add the following scripts to your `package.json`:

```json
{
  "scripts": {
    "dev": "run-p dev:*",
    "dev:next": "next dev",
    "dev:frourio": "frourio-next --watch", // Watches frourio.ts, generates .server.ts and .client.ts
    "build": "frourio-next && next build", // Generates files before building
    // Optional: OpenAPI generation
    "dev:openapi": "frourio-next-openapi --output=./public/openapi.json --watch",
    "build:openapi": "frourio-next-openapi --output=./public/openapi.json",
    // Optional: MSW generation
    "dev:msw": "frourio-next-msw --output=./src/mocks/handlers.ts --watch",
    "generate:msw": "frourio-next-msw --output=./src/mocks/handlers.ts"
  }
}
```

- `frourio-next`: The core CLI command for generating server helpers and client code.
- `frourio-next-openapi`: (Optional) The CLI command for generating OpenAPI specifications.
- `frourio-next-msw`: (Optional) The CLI command for generating MSW handlers.

## 5. API Specification (`frourio.ts`)

This file defines the contract for an API route segment.

**Structure Example (`app/api/tasks/[taskId]/frourio.ts`):**

```typescript
import type { FrourioSpec } from '@frourio/next';
import { z } from 'zod';

// Define reusable Zod schemas (optional)
const TaskSchema = z.object({
  id: z.string().uuid(),
  label: z.string(),
  isDone: z.boolean(),
});
const ErrorSchema = z.object({ message: z.string() });

export const frourioSpec = {
  // Path parameter schema for the current dynamic segment ([taskId])
  param: z.string().uuid(),

  // Middleware configuration (optional) - Example: Inject traceId
  middleware: { context: z.object({ traceId: z.string() }) },

  // Definitions for each HTTP method
  get: {
    // Query parameter schema (optional)
    query: z.object({
      includeAssignee: z.boolean().optional(),
      limit: z.number().int().positive().optional(), // Parsed from string
    }),

    // Request headers schema (optional)
    headers: z.object({
      'x-api-key': z.string().optional(), // Lowercase keys
    }),

    // Response schemas mapped by status code (optional)
    res: {
      200: { body: TaskSchema }, // Success response
      404: { body: ErrorSchema }, // Error response
    },
  },

  patch: {
    // Request body schema (optional)
    body: TaskSchema.pick({ label: true, isDone: true }).partial(),

    // Response schemas
    res: {
      200: { body: TaskSchema },
      400: { body: ErrorSchema }, // Bad request (e.g., invalid data format)
      404: { body: ErrorSchema },
    },
  },

  delete: {
    // No request body or query params needed

    // Response schemas
    res: {
      204: {}, // Success with No Content
      404: { body: ErrorSchema },
    },
  },
} satisfies FrourioSpec;

// Export inferred types (optional but recommended)
export type Task = z.infer<typeof TaskSchema>;
```

**Key Properties:**

- `param`: Zod schema for the dynamic path parameter(s).
- `query`: Zod object schema for query parameters. Handles type coercion (string to number/boolean) and array parsing.
- `headers`: Zod object schema for request headers (use lowercase keys).
- `body`: Zod schema for the request body.
- `format`: `'formData'` for file uploads, otherwise assumes JSON.
- `res`: Object mapping status codes to response schemas (`{ body: ZodSchema }` or `{}` for no body). Omit entirely for raw `Response` handling (streaming).
- `middleware`: Configures middleware behavior (see Section 7).

## 6. Route Handler (`route.ts`) and `createRoute`

Implement the API logic using the `createRoute` helper.

**`createRoute` Function:**

- Imported from the generated `./frourio.server.ts`.
- Takes an object mapping HTTP methods (uppercase) and/or `middleware` to their implementation functions.
- Returns an object with generated Next.js Route Handler functions (`GET`, `POST`, etc.).

**Handler Function Example (`app/api/tasks/[taskId]/route.ts`):**

```typescript
import { createRoute } from './frourio.server';
import type { Task } from './frourio'; // Import inferred type

// Mock DB - Replace with your data logic
const db = new Map<string, Task>();
db.set('task-1', { id: 'task-1', label: 'Implement Frourio', isDone: false });

// Example middleware implementation (matches middleware defined in frourio.ts)
const taskMiddleware = async ({ req, next }: any, parentContext: any) => {
  const traceId = req.headers.get('x-request-id') ?? require('crypto').randomUUID();
  console.log(`Task Middleware: Trace ID = ${traceId}`);
  // Pass context defined in frourio.ts's middleware.context
  return next({ traceId });
};

export const { GET, PATCH, DELETE, middleware } = createRoute({
  // Middleware implementation (optional)
  middleware: taskMiddleware,

  // GET handler
  // Receives validated data and context from middleware
  get: async ({ params, query, headers }, context) => {
    console.log('GET /tasks/:taskId');
    console.log('Trace ID from context:', context.traceId); // Access middleware context
    console.log('Validated Params:', params); // Type: string (uuid)
    console.log('Validated Query:', query); // Type: { includeAssignee?: boolean, limit?: number }
    console.log('Validated Headers:', headers); // Type: { 'x-api-key'?: string }

    const task = db.get(params); // Use validated param directly

    if (!task) {
      // Return object matching 'res' schema for 404
      return { status: 404, body: { message: 'Task not found' } };
    }
    // Return object matching 'res' schema for 200
    return { status: 200, body: task };
  },

  // PATCH handler
  patch: async ({ params, body }, context) => {
    console.log('PATCH /tasks/:taskId');
    console.log('Trace ID from context:', context.traceId);
    console.log('Validated Params:', params);
    console.log('Validated Body:', body); // Type: Partial<Pick<Task, 'label' | 'isDone'>>

    const existingTask = db.get(params);
    if (!existingTask) {
      return { status: 404, body: { message: 'Task not found' } };
    }

    const updatedTask = { ...existingTask, ...body }; // Apply partial updates
    db.set(params, updatedTask);

    return { status: 200, body: updatedTask };
  },

  // DELETE handler
  delete: async ({ params }, context) => {
    console.log('DELETE /tasks/:taskId');
    console.log('Trace ID from context:', context.traceId);
    console.log('Validated Params:', params);

    if (!db.has(params)) {
      return { status: 404, body: { message: 'Task not found' } };
    }
    db.delete(params);
    // Return object matching 204 schema (no body)
    return { status: 204 };
  },
});
```

**How `createRoute` Works Internally:**
(Details omitted for brevity - see previous version if needed. Core function: validates request, calls handler, validates response based on `frourio.ts`)

## 7. Middleware

Execute code before handlers.

**Defining Middleware (`frourio.ts`):**

- `middleware: { context: ZodSchema }`: Inherit parent context, execute current middleware, add `newContext` matching `ZodSchema` to context passed down.
- `middleware: true`: Inherit parent context, execute current middleware, pass *unchanged* parent context down.
- Omit `middleware`: Inherit parent context, skip current middleware execution.

**Implementing Middleware (`route.ts`):**

Provide a `middleware` function in `createRoute`.

```typescript
// Example Root Middleware (app/api/mw/route.ts)
import { createRoute } from './frourio.server';
import type { AuthContext } from './frourio'; // Assuming AuthContext defined in frourio.ts

const authenticate = (req: Request): AuthContext['user'] => {
  const token = req.headers.get('Authorization')?.split(' ')[1];
  if (token === 'valid-user-token') return { id: 'user-123', roles: ['viewer'] };
  if (token === 'valid-admin-token') return { id: 'admin-456', roles: ['admin', 'viewer'] };
  return undefined;
};

export const { middleware } = createRoute({
  middleware: async ({ req, next }) => {
    const user = authenticate(req);
    console.log('Root Middleware: Authenticated user:', user?.id);
    // Pass context matching middleware.context schema in frourio.ts
    return next({ user });
  },
});

// Example Nested Middleware (app/api/mw/admin/route.ts)
import { createRoute } from './frourio.server';
import type { AuthContext } from '../frourio'; // Context from parent
import type { AdminContext } from './frourio'; // Context defined here

export const { middleware, GET, POST } = createRoute({
  middleware: async ({ req, next }, parentContext: AuthContext) => {
    console.log('Admin Middleware: Received user:', parentContext.user?.id);
    const isAdmin = parentContext.user?.roles.includes('admin') ?? false;

    // Example: Access control
    if (req.method === 'POST' && !isAdmin) {
      return new Response(JSON.stringify({ message: 'Forbidden: Admin access required' }), { status: 403 });
    }

    const permissions = isAdmin ? ['read', 'write', 'delete'] : ['read'];
    // Pass context matching this middleware's context schema
    return next({ isAdmin, permissions }); // Assuming AdminContext = { isAdmin: boolean, permissions: string[] }
  },

  // Handlers receive combined context (AuthContext & AdminContext)
  get: async ({}, context) => {
    console.log('Admin GET: User=', context.user?.id, 'IsAdmin=', context.isAdmin, 'Perms=', context.permissions);
    return { status: 200, body: { ...context } };
  },
  post: async ({ body }, context) => {
     // This handler only runs if middleware allowed it (isAdmin check passed)
     console.log('Admin POST: User=', context.user?.id, 'IsAdmin=', context.isAdmin);
     return { status: 201, body: { received: body, context } };
  }
});
```

**Execution Flow:** Parent -> Child middleware execution. Context is inherited and potentially augmented at each level. Handlers receive the final merged context.

## 8. Type-Safe Client (`frourio.client.ts`)

Generated functions (`fc`, `$fc`) for type-safe API calls. Client code (`frourio.client.ts`) is generated only for endpoints that define HTTP methods (GET, POST, etc.). Endpoints that only define middleware will not have client code generated.

**Initialization (`lib/apiClient.ts`):**

```typescript
import { fc, $fc } from '@/app/frourio.client'; // Import from ROOT generated client

const options = { baseURL: 'http://localhost:3000' /* ... other options */ };

// High-Level Client ($fc): Throws errors, returns parsed body.
export const apiClient = $fc(options);

// Low-Level Client (fc): Returns detailed result object.
export const lowLevelApiClient = fc(options);
```

**Making Requests:**

```typescript
// Example GET request
try {
  const task = await apiClient['api']['tasks']['[taskId]'].$get({
    params: { taskId: 'task-1' },
    query: { includeAssignee: true },
    headers: { 'x-api-key': 'my-key' },
  });
  console.log('Fetched Task:', task); // Type: Task
} catch (error) {
  console.error('Failed to fetch task:', error); // Handles HTTP/ZodError
}

// Example POST request with low-level client
const result = await lowLevelApiClient['api']['tasks'].$post({
  body: { label: 'New Task', isDone: false },
});
if (result.ok && result.isValid) {
  console.log('Created Task:', result.data.body); // Type: Task (assuming 201 res)
} else {
  // Handle API errors, validation errors, network errors
  console.error('Failed to create task:', result);
}
```

**Client Function Differences (`$fc` vs `fc`):**

- **`$fc` (High-Level):**
    - Use Case: Simplicity, exception-based error handling.
    - Success: Returns validated body (or raw `Response` if `res` omitted).
    - Failure: Throws `Error` (HTTP >= 400, network) or `ZodError` (validation).
- **`fc` (Low-Level):**
    - Use Case: Fine-grained error handling, access raw response.
    - Returns: Detailed result object (`{ ok, isValid, data, failure, reason, error, raw }`).
    - **Handling `fc` Results (Example Checks):**
      ```typescript
      const result = await lowLevelApiClient['api/test-client'].$get({ query: { /* ... */ } });

      if (!result.isValid) {
        // Request or Response Validation Error
        console.error('Validation Error:', result.reason?.issues);
        // expect(result.isValid).toBe(false);
        // expect(result.reason).toBeInstanceOf(ZodError);
      } else if (!result.ok) {
        // API Error (e.g., 4xx, 5xx defined in `res`)
        console.error(`API Error ${result.failure.status}:`, result.failure.body);
        // expect(result.ok).toBe(false);
        // expect(result.isValid).toBe(true); // Schema matched the error response
        // expect(result.failure.status).toBe(400);
      } else if (result.ok) {
        // Success
        console.log('Success:', result.data.body);
        // expect(result.ok).toBe(true);
        // expect(result.isValid).toBe(true);
        // expect(result.data.status).toBe(200);
      } else {
         // Network/Fetch Error or other unexpected issue
         console.error('Fetch/Unknown Error:', result.error);
         // expect(result.error).toBeDefined();
      }
      ```

## 9. Handling FormData (File Uploads)

- **`frourio.ts`**: Set `format: 'formData'`, use `z.instanceof(File)` in `body` schema.
- **`route.ts`**: Access `File` objects in the validated `body`.
  ```typescript
  // Example Handler Snippet
  post: async ({ body }) => {
    console.log('User ID:', body.userId); // string
    console.log('Profile Image:', body.profileImage.name, body.profileImage.size); // File object
    // ... save body.profileImage ...
    return { status: 201, body: { message: 'Success', fileName: body.profileImage.name } };
  }
  ```
- **Client-Side**: Pass a *plain object* with `File` instances to the client's `body`.
  ```typescript
  const imageFile = document.getElementById('fileInput').files[0];
  const requestBody = { userId: 'user-123', profileImage: imageFile };
  try {
    // Client automatically creates FormData from requestBody
    const result = await apiClient['api/upload'].$post({ body: requestBody });
    console.log('Upload successful:', result);
  } catch (e) { console.error(e); }
  ```

## 10. LLM Streaming & Raw Response Handling

- **`frourio.ts`**: Omit the `res` property for the method.
- **`route.ts`**: Handler *must* return a `Response` object (e.g., `return streamResult.toAIStreamResponse();`).
- **Client-Side**:
    - `$fc`: Returns the raw `Response` on success (2xx).
    - `fc`: `result.data` (on success) or `result.failure` (on non-2xx) contains the raw `Response`.
    - Read the stream:
      ```typescript
      // Using fc
      const result = await lowLevelApiClient['api/chat'].$post({ body: { prompt: '...' } });
      if (result.ok && result.data) { // result.data is the Response
        const reader = result.data.body?.getReader();
        if (reader) {
          const decoder = new TextDecoder();
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            console.log('Stream chunk:', decoder.decode(value));
          }
        }
      } else { /* Handle error */ }
      ```

## 11. Integration with Data Fetching Libraries (`useSWR`, `useQuery`)

Use the `$build()` method on `$fc` client endpoints.

**`endpoint.$build(options)`:**
- Returns `[key, fetcher]` tuple (or `[null, fetcher]` if `options` is `null`).
- `key`: Stable cache key string (e.g., `GET:/api/users/[userId]?userId=123`).
- `fetcher`: Async function `() => Promise<ResponseType>` executing the `$fc` call.

**Usage with `useSWR`:**

```typescript
import useSWR from 'swr';
import { apiClient } from '@/lib/apiClient';

const buildArgs = apiClient['api/users']['[userId]'].$build(userId ? { params: { userId } } : null);
// buildArgs is e.g., ['GET:/api/users/[userId]?userId=abc', async () => { ... }] or [null, async () => { ... }]
const { data, error, isLoading } = useSWR(...buildArgs); // Spread tuple
```

**Usage with `useQuery`:**

```typescript
import { useQuery } from '@tanstack/react-query';
import { apiClient } from '@/lib/apiClient';

const [queryKey, queryFn] = apiClient['api/users']['[userId]'].$build(userId ? { params: { userId } } : null);
const { data, error, status } = useQuery({
  queryKey: [queryKey], // Use key (wrapped in array)
  queryFn: queryFn,     // Use fetcher
  enabled: !!queryKey,  // Disable query if key is null
});
```

## 12. Testing

- **Route Handlers (`route.ts`)**: Use `vitest` or similar. Create mock `NextRequest` objects. Call exported handlers directly. Assert response status and body.
  ```typescript
  // Example Handler Test
  import { GET } from '../app/api/tasks/[taskId]/route'; // Import handler
  import { NextRequest } from 'next/server';

  test('GET /tasks/:taskId - Success', async () => {
    const req = new NextRequest('http://localhost/api/tasks/task-1');
    // Mock context if middleware provides it
    const mockContext = { traceId: 'test-trace' };
    // Call handler with request and potentially mocked context/params
    const res = await GET(req, mockContext); // Assuming GET takes context
    expect(res.status).toBe(200);
    await expect(res.json()).resolves.toEqual({ id: 'task-1', /* ... */ });
  });
  ```
- **Client-Side Code**: Use `msw` to mock `fetch`. Define handlers matching API routes. Test components/functions using `apiClient` or `lowLevelApiClient`.
  ```typescript
  // Example Client Test Setup (using msw)
  import { http, HttpResponse } from 'msw';
  import { setupServer } from 'msw/node';
  import { apiClient } from '@/lib/apiClient'; // Your initialized client

  const server = setupServer(
    http.get('http://localhost/api/tasks/:taskId', ({ params }) => {
      if (params.taskId === 'task-1') {
        return HttpResponse.json({ id: 'task-1', label: 'Mock Task', isDone: false });
      }
      return HttpResponse.json({ message: 'Not Found' }, { status: 404 });
    })
  );
  beforeAll(() => server.listen());
  afterEach(() => server.resetHandlers());
  afterAll(() => server.close());

  test('apiClient fetches task successfully', async () => {
    const task = await apiClient['api']['tasks']['[taskId]'].$get({ params: { taskId: 'task-1' } });
    expect(task.label).toBe('Mock Task');
  });
  ```

## 13. OpenAPI 3.1 Generation

Use the `frourio-next-openapi` CLI command.

**Usage:**

```bash
npm run build:openapi
# or watch mode:
npm run dev:openapi
```

**CLI Options (`frourio-next-openapi`):**
- `--output`, `-o` (string): Output path (e.g., `./public/openapi.json`).
- `--watch`, `-w`: Enable watch mode.
- `--root`, `-r` (string): Generate OpenAPI for endpoints only within the specified appDir subdirectory (e.g., `./src/app/api/v1`).

## 14. Core CLI Options (`frourio-next`)

**CLI Options (`frourio-next`):**
- `--watch`, `-w`: Enable watch mode. Regenerates `*.server.ts` and `*.client.ts` on `frourio.ts` changes.

## 15. MSW Handlers Generation

FrourioNext can automatically generate MSW (Mock Service Worker) request handlers based on your `frourio.ts` definitions. This is particularly useful for mocking API calls in tests or during frontend development without a running backend.

**CLI Command:** `frourio-next-msw`

**Usage:**

Add the following scripts to your `package.json` (if not already present):

```json
{
  "scripts": {
    "dev:msw": "frourio-next-msw --output=./src/mocks/handlers.ts --watch",
    "generate:msw": "frourio-next-msw --output=./src/mocks/handlers.ts"
  }
}
```

Then run the command:

```bash
npm run generate:msw
# or with watch mode during development:
npm run dev:msw
```

This command scans your `frourio.ts` files and generates a file (by default `./tests/setupMswHandlers.ts`, but configurable via `--output`) exporting a `setupMswHandlers` function.

**Using Generated Handlers:**

Import the `setupMswHandlers` function in your MSW setup code (e.g., test setup files or MSW worker file) and call it with your API `baseURL` to get an array of MSW `RequestHandler`s.

```typescript
// Example usage in a test setup file (e.g., src/mocks/setup.ts)
import { setupServer } from 'msw/node';
// Import the generated handlers - adjust path based on your output config
import { setupMswHandlers } from './handlers';

// Assuming your API base URL
const handlers = setupMswHandlers('http://localhost:3000');

export const server = setupServer(...handlers);

// In your test file:
// import { server } from './mocks/setup';
// beforeAll(() => server.listen());
// afterEach(() => server.resetHandlers());
// afterAll(() => server.close());
```

**CLI Options (`frourio-next-msw`):**

- `--output`, `-o` (string): Output path for the generated MSW handlers file (e.g., `./src/mocks/handlers.ts`). Defaults to `./tests/setupMswHandlers.ts`.
- `--watch`, `-w`: Enable watch mode. Regenerates handlers on `frourio.ts` changes.